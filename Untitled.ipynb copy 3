{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "264e088a",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 1213"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "75616af0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['3', '1', '2', '1']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(str(x))[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fc90332b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "12%10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2b75011e",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0827ffed",
   "metadata": {},
   "outputs": [],
   "source": [
    "s.add(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a06d797a",
   "metadata": {},
   "outputs": [],
   "source": [
    "s.add(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4cab0e0e",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Bucket' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/9t/bkcg07jd3_130c8jc7j5x77w0000gn/T/ipykernel_3427/3759240742.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0mBucket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/var/folders/9t/bkcg07jd3_130c8jc7j5x77w0000gn/T/ipykernel_3427/3759240742.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0mBucket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'Bucket' is not defined"
     ]
    }
   ],
   "source": [
    "[Bucket() for i in range(2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4cb238c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "dict = {}\n",
    "dict['a'] = 1\n",
    "dict['b'] = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "907cc2a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 1)\n",
      "('b', 2)\n"
     ]
    }
   ],
   "source": [
    "for i in dict.items():\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "64cd4409",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = [0]*26"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "828cd825",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "227e7825",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr[ord('c')-ord('a')]=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b8ab779d",
   "metadata": {},
   "outputs": [],
   "source": [
    "arr[ord('z')-ord('a')] = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3f8b0b4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8159433e",
   "metadata": {},
   "outputs": [],
   "source": [
    "res = [2]\n",
    "N = 100\n",
    "for i in range(2, N + 1):\n",
    "    status = True\n",
    "    for j in res:\n",
    "        if i%j ==0:\n",
    "            status = False\n",
    "            break\n",
    "    if status:\n",
    "        res.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "a0530086",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn import datasets\n",
    "\n",
    "iris = datasets.load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "b644ac1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_df=pd.DataFrame(iris.data)\n",
    "iris_df['class']=iris.target\n",
    "\n",
    "iris.columns=['sepal_len', 'sepal_wid', 'petal_len', 'petal_wid', 'class1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0d669147",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = iris_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "1b734b25",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris.columns=['sepal_len', 'sepal_wid', 'petal_len', 'petal_wid', 'type']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9fe9ba4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_len</th>\n",
       "      <th>sepal_wid</th>\n",
       "      <th>petal_len</th>\n",
       "      <th>petal_wid</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_len  sepal_wid  petal_len  petal_wid  type\n",
       "0          5.1        3.5        1.4        0.2     0\n",
       "1          4.9        3.0        1.4        0.2     0\n",
       "2          4.7        3.2        1.3        0.2     0\n",
       "3          4.6        3.1        1.5        0.2     0\n",
       "4          5.0        3.6        1.4        0.2     0\n",
       "..         ...        ...        ...        ...   ...\n",
       "145        6.7        3.0        5.2        2.3     2\n",
       "146        6.3        2.5        5.0        1.9     2\n",
       "147        6.5        3.0        5.2        2.0     2\n",
       "148        6.2        3.4        5.4        2.3     2\n",
       "149        5.9        3.0        5.1        1.8     2\n",
       "\n",
       "[150 rows x 5 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "bb94454d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_len</th>\n",
       "      <th>sepal_wid</th>\n",
       "      <th>petal_len</th>\n",
       "      <th>petal_wid</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.9</td>\n",
       "      <td>4.4</td>\n",
       "      <td>6.9</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_len  sepal_wid  petal_len  petal_wid  type\n",
       "max        7.9        4.4        6.9        2.5   2.0\n",
       "min        4.3        2.0        1.0        0.1   0.0"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame([iris.max(), iris.min()], index = ['max','min'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ece5be71",
   "metadata": {},
   "outputs": [],
   "source": [
    "dic = dict(iris)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "b4af8542",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_len</th>\n",
       "      <th>sepal_wid</th>\n",
       "      <th>petal_len</th>\n",
       "      <th>petal_wid</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepal_len  sepal_wid  petal_len  petal_wid  type\n",
       "0          5.1        3.5        1.4        0.2     0\n",
       "1          4.9        3.0        1.4        0.2     0\n",
       "2          4.7        3.2        1.3        0.2     0\n",
       "3          4.6        3.1        1.5        0.2     0\n",
       "4          5.0        3.6        1.4        0.2     0\n",
       "..         ...        ...        ...        ...   ...\n",
       "145        6.7        3.0        5.2        2.3     2\n",
       "146        6.3        2.5        5.0        1.9     2\n",
       "147        6.5        3.0        5.2        2.0     2\n",
       "148        6.2        3.4        5.4        2.3     2\n",
       "149        5.9        3.0        5.1        1.8     2\n",
       "\n",
       "[150 rows x 5 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(dic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "2347a972",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_len</th>\n",
       "      <th>sepal_wid</th>\n",
       "      <th>petal_len</th>\n",
       "      <th>petal_wid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15</td>\n",
       "      <td>16</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>20</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      sepal_len  sepal_wid  petal_len  petal_wid\n",
       "type                                            \n",
       "0            15         16          9          6\n",
       "1            21         14         19          9\n",
       "2            21         13         20         12"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.groupby(['type']).nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "ba7d8073",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "ca42e54b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "y = random.randint(0,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7afe7f7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c977fe3c",
   "metadata": {},
   "source": [
    "## 计算平方根"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "60ddab67",
   "metadata": {},
   "outputs": [],
   "source": [
    "def newton(m):\n",
    "    import random\n",
    "    x = random.randint(0,m)\n",
    "    while abs(m - x**2) > 10**(-8):\n",
    "        x = (x**2+m)/(2*x)\n",
    "        print(x)\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "f6357ebf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26.480392156862745\n",
      "15.128385637853809\n",
      "10.869238128909712\n",
      "10.034757492465861\n",
      "10.000060194941604\n",
      "10.00000000018117\n",
      "10.00000000018117\n"
     ]
    }
   ],
   "source": [
    "square_root = newton(100)\n",
    "print(square_root)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a6c13d0",
   "metadata": {},
   "source": [
    "## 生成素数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cdcd10a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def check(num):\n",
    "    import math\n",
    "    if num == 1: return False    \n",
    "    for i in range(2,int(math.sqrt(num))+1):\n",
    "        if num%i == 0:\n",
    "            return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0021e30c",
   "metadata": {},
   "source": [
    "## 一元一次方程"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "24dc1373",
   "metadata": {},
   "outputs": [],
   "source": [
    "def solve(eq, var='x'):\n",
    "    print(eq)\n",
    "    print(1)\n",
    "    eq1 = eq.replace(\"=\", \"-(\")+\")\"\n",
    "    print(eq1)\n",
    "    eq1 = eq1.replace(\"x\", \"*x\")\n",
    "    print(eq1)\n",
    "    eq1 = eq1.replace(\"+*x\", \"+x\")\n",
    "    print(eq1)\n",
    "    eq1 = eq1.replace(\"-*x\", \"-x\")\n",
    "    print(eq1)\n",
    "    eq1 = eq1.replace(\"(*x\", \"(x\")\n",
    "    print(eq1)\n",
    "    #print(eq1)\n",
    "    c = eval(eq1, {var: 1j})\n",
    "    return -c.real/c.imag"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fa74821d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input a euqation:\n",
      "2x-6=0\n",
      "2x-6=0\n",
      "1\n",
      "2x-6-(0)\n",
      "2*x-6-(0)\n",
      "2*x-6-(0)\n",
      "2*x-6-(0)\n",
      "2*x-6-(0)\n",
      "The answer is: 3.0\n"
     ]
    }
   ],
   "source": [
    "#test = \"10 x- 2 x= x + 12\"\n",
    "test = input('Input a euqation:\\n')\n",
    "print(\"The answer is:\", solve(test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1e7ea58d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input a euqation:\n",
      "10x-2x=x+12\n",
      "['10x-2x', 'x+12']\n"
     ]
    }
   ],
   "source": [
    "test = list(input('Input a euqation:\\n').split(\"=\"))\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9b069c41",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = \"10x-2x=x+12\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "aa98a3d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "eq = list(test.split(\"=\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b21a6aa2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['10x-2x', 'x+12']"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "eb445b81",
   "metadata": {},
   "outputs": [],
   "source": [
    "l = re.split(pattern='[a-z]',string = eq[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5372e350",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['10', '-2', '']"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9 (tensorflow)",
   "language": "python",
   "name": "tensorflow"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
